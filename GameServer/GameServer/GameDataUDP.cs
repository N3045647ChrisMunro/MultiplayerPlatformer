// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDataUDP.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameDataUDP {

  /// <summary>Holder for reflection information generated from GameDataUDP.proto</summary>
  public static partial class GameDataUDPReflection {

    #region Descriptor
    /// <summary>File descriptor for GameDataUDP.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataUDPReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFHYW1lRGF0YVVEUC5wcm90bxILR2FtZURhdGFVRFAiLAoOUG9zaXRpb25V",
            "cGRhdGUSDAoEeFBvcxgBIAEoAhIMCgR5UG9zGAIgASgCIkIKC0RhdGFNZXNz",
            "YWdlEjMKDnBvc2l0aW9uVXBkYXRlGAEgASgLMhsuR2FtZURhdGFVRFAuUG9z",
            "aXRpb25VcGRhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameDataUDP.PositionUpdate), global::GameDataUDP.PositionUpdate.Parser, new[]{ "XPos", "YPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameDataUDP.DataMessage), global::GameDataUDP.DataMessage.Parser, new[]{ "PositionUpdate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PositionUpdate : pb::IMessage<PositionUpdate> {
    private static readonly pb::MessageParser<PositionUpdate> _parser = new pb::MessageParser<PositionUpdate>(() => new PositionUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameDataUDP.GameDataUDPReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate(PositionUpdate other) : this() {
      xPos_ = other.xPos_;
      yPos_ = other.yPos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate Clone() {
      return new PositionUpdate(this);
    }

    /// <summary>Field number for the "xPos" field.</summary>
    public const int XPosFieldNumber = 1;
    private float xPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XPos {
      get { return xPos_; }
      set {
        xPos_ = value;
      }
    }

    /// <summary>Field number for the "yPos" field.</summary>
    public const int YPosFieldNumber = 2;
    private float yPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YPos {
      get { return yPos_; }
      set {
        yPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XPos != other.XPos) return false;
      if (YPos != other.YPos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XPos != 0F) hash ^= XPos.GetHashCode();
      if (YPos != 0F) hash ^= YPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XPos != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XPos);
      }
      if (YPos != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XPos != 0F) {
        size += 1 + 4;
      }
      if (YPos != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionUpdate other) {
      if (other == null) {
        return;
      }
      if (other.XPos != 0F) {
        XPos = other.XPos;
      }
      if (other.YPos != 0F) {
        YPos = other.YPos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XPos = input.ReadFloat();
            break;
          }
          case 21: {
            YPos = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataMessage : pb::IMessage<DataMessage> {
    private static readonly pb::MessageParser<DataMessage> _parser = new pb::MessageParser<DataMessage>(() => new DataMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameDataUDP.GameDataUDPReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage(DataMessage other) : this() {
      PositionUpdate = other.positionUpdate_ != null ? other.PositionUpdate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage Clone() {
      return new DataMessage(this);
    }

    /// <summary>Field number for the "positionUpdate" field.</summary>
    public const int PositionUpdateFieldNumber = 1;
    private global::GameDataUDP.PositionUpdate positionUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameDataUDP.PositionUpdate PositionUpdate {
      get { return positionUpdate_; }
      set {
        positionUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PositionUpdate, other.PositionUpdate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (positionUpdate_ != null) hash ^= PositionUpdate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (positionUpdate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PositionUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (positionUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PositionUpdate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataMessage other) {
      if (other == null) {
        return;
      }
      if (other.positionUpdate_ != null) {
        if (positionUpdate_ == null) {
          positionUpdate_ = new global::GameDataUDP.PositionUpdate();
        }
        PositionUpdate.MergeFrom(other.PositionUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (positionUpdate_ == null) {
              positionUpdate_ = new global::GameDataUDP.PositionUpdate();
            }
            input.ReadMessage(positionUpdate_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
