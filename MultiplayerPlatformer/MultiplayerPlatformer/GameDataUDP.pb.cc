// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDataUDP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameDataUDP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameDataUDP {

namespace {

const ::google::protobuf::Descriptor* KeyPress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyPress_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPositionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPositionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerVelcityUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerVelcityUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BulletPositionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BulletPositionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollisionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameDataUDP_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameDataUDP_2eproto() {
  protobuf_AddDesc_GameDataUDP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameDataUDP.proto");
  GOOGLE_CHECK(file != NULL);
  KeyPress_descriptor_ = file->message_type(0);
  static const int KeyPress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPress, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPress, key_),
  };
  KeyPress_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyPress_descriptor_,
      KeyPress::default_instance_,
      KeyPress_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyPress),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPress, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPress, _is_default_instance_));
  PlayerPositionUpdate_descriptor_ = file->message_type(1);
  static const int PlayerPositionUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositionUpdate, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositionUpdate, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositionUpdate, ypos_),
  };
  PlayerPositionUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerPositionUpdate_descriptor_,
      PlayerPositionUpdate::default_instance_,
      PlayerPositionUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerPositionUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositionUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPositionUpdate, _is_default_instance_));
  PlayerVelcityUpdate_descriptor_ = file->message_type(2);
  static const int PlayerVelcityUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVelcityUpdate, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVelcityUpdate, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVelcityUpdate, ypos_),
  };
  PlayerVelcityUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerVelcityUpdate_descriptor_,
      PlayerVelcityUpdate::default_instance_,
      PlayerVelcityUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerVelcityUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVelcityUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVelcityUpdate, _is_default_instance_));
  BulletPositionUpdate_descriptor_ = file->message_type(3);
  static const int BulletPositionUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletPositionUpdate, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletPositionUpdate, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletPositionUpdate, ypos_),
  };
  BulletPositionUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BulletPositionUpdate_descriptor_,
      BulletPositionUpdate::default_instance_,
      BulletPositionUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(BulletPositionUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletPositionUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BulletPositionUpdate, _is_default_instance_));
  CollisionUpdate_descriptor_ = file->message_type(4);
  static const int CollisionUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionUpdate, playerhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionUpdate, object_),
  };
  CollisionUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionUpdate_descriptor_,
      CollisionUpdate::default_instance_,
      CollisionUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(CollisionUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionUpdate, _is_default_instance_));
  DataMessage_descriptor_ = file->message_type(5);
  static const int DataMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, keypress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, playerposupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, playervelocityupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, bulletposupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, collisionupdate_),
  };
  DataMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameDataUDP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyPress_descriptor_, &KeyPress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerPositionUpdate_descriptor_, &PlayerPositionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerVelcityUpdate_descriptor_, &PlayerVelcityUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BulletPositionUpdate_descriptor_, &BulletPositionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionUpdate_descriptor_, &CollisionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataMessage_descriptor_, &DataMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameDataUDP_2eproto() {
  delete KeyPress::default_instance_;
  delete KeyPress_reflection_;
  delete PlayerPositionUpdate::default_instance_;
  delete PlayerPositionUpdate_reflection_;
  delete PlayerVelcityUpdate::default_instance_;
  delete PlayerVelcityUpdate_reflection_;
  delete BulletPositionUpdate::default_instance_;
  delete BulletPositionUpdate_reflection_;
  delete CollisionUpdate::default_instance_;
  delete CollisionUpdate_reflection_;
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
}

void protobuf_AddDesc_GameDataUDP_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameDataUDP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameDataUDP.proto\022\013GameDataUDP\")\n\010KeyP"
    "ress\022\020\n\010username\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\"D\n\024P"
    "layerPositionUpdate\022\020\n\010username\030\001 \001(\t\022\014\n"
    "\004xPos\030\002 \001(\002\022\014\n\004yPos\030\003 \001(\002\"C\n\023PlayerVelci"
    "tyUpdate\022\020\n\010username\030\001 \001(\t\022\014\n\004xPos\030\002 \001(\002"
    "\022\014\n\004yPos\030\003 \001(\002\"A\n\024BulletPositionUpdate\022\r"
    "\n\005owner\030\001 \001(\t\022\014\n\004xPos\030\002 \001(\002\022\014\n\004yPos\030\003 \001("
    "\002\"4\n\017CollisionUpdate\022\021\n\tplayerHit\030\001 \001(\t\022"
    "\016\n\006object\030\002 \001(\t\"\245\002\n\013DataMessage\022\'\n\010keyPr"
    "ess\030\001 \001(\0132\025.GameDataUDP.KeyPress\022:\n\017play"
    "erPosUpdate\030\002 \001(\0132!.GameDataUDP.PlayerPo"
    "sitionUpdate\022>\n\024playerVelocityUpdate\030\003 \001"
    "(\0132 .GameDataUDP.PlayerVelcityUpdate\022:\n\017"
    "bulletPosUpdate\030\004 \001(\0132!.GameDataUDP.Bull"
    "etPositionUpdate\0225\n\017collisionUpdate\030\005 \001("
    "\0132\034.GameDataUDP.CollisionUpdateb\006proto3", 639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameDataUDP.proto", &protobuf_RegisterTypes);
  KeyPress::default_instance_ = new KeyPress();
  PlayerPositionUpdate::default_instance_ = new PlayerPositionUpdate();
  PlayerVelcityUpdate::default_instance_ = new PlayerVelcityUpdate();
  BulletPositionUpdate::default_instance_ = new BulletPositionUpdate();
  CollisionUpdate::default_instance_ = new CollisionUpdate();
  DataMessage::default_instance_ = new DataMessage();
  KeyPress::default_instance_->InitAsDefaultInstance();
  PlayerPositionUpdate::default_instance_->InitAsDefaultInstance();
  PlayerVelcityUpdate::default_instance_->InitAsDefaultInstance();
  BulletPositionUpdate::default_instance_->InitAsDefaultInstance();
  CollisionUpdate::default_instance_->InitAsDefaultInstance();
  DataMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameDataUDP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameDataUDP_2eproto {
  StaticDescriptorInitializer_GameDataUDP_2eproto() {
    protobuf_AddDesc_GameDataUDP_2eproto();
  }
} static_descriptor_initializer_GameDataUDP_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyPress::kUsernameFieldNumber;
const int KeyPress::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyPress::KeyPress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.KeyPress)
}

void KeyPress::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyPress::KeyPress(const KeyPress& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.KeyPress)
}

void KeyPress::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyPress::~KeyPress() {
  // @@protoc_insertion_point(destructor:GameDataUDP.KeyPress)
  SharedDtor();
}

void KeyPress::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyPress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyPress_descriptor_;
}

const KeyPress& KeyPress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

KeyPress* KeyPress::default_instance_ = NULL;

KeyPress* KeyPress::New(::google::protobuf::Arena* arena) const {
  KeyPress* n = new KeyPress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPress::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.KeyPress)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyPress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.KeyPress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.KeyPress.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.KeyPress.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.KeyPress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.KeyPress)
  return false;
#undef DO_
}

void KeyPress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.KeyPress)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.KeyPress.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.KeyPress.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.KeyPress)
}

::google::protobuf::uint8* KeyPress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.KeyPress)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.KeyPress.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.KeyPress.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.KeyPress)
  return target;
}

int KeyPress::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.KeyPress)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.KeyPress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyPress* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyPress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.KeyPress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.KeyPress)
    MergeFrom(*source);
  }
}

void KeyPress::MergeFrom(const KeyPress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.KeyPress)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void KeyPress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.KeyPress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPress::CopyFrom(const KeyPress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.KeyPress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPress::IsInitialized() const {

  return true;
}

void KeyPress::Swap(KeyPress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPress::InternalSwap(KeyPress* other) {
  username_.Swap(&other->username_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyPress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyPress_descriptor_;
  metadata.reflection = KeyPress_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyPress

// optional string username = 1;
void KeyPress::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyPress::username() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.KeyPress.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPress::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.KeyPress.username)
}
 void KeyPress::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.KeyPress.username)
}
 void KeyPress::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.KeyPress.username)
}
 ::std::string* KeyPress::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.KeyPress.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPress::release_username() {
  // @@protoc_insertion_point(field_release:GameDataUDP.KeyPress.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPress::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.KeyPress.username)
}

// optional string key = 2;
void KeyPress::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyPress::key() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.KeyPress.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPress::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.KeyPress.key)
}
 void KeyPress::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.KeyPress.key)
}
 void KeyPress::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.KeyPress.key)
}
 ::std::string* KeyPress::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.KeyPress.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPress::release_key() {
  // @@protoc_insertion_point(field_release:GameDataUDP.KeyPress.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPress::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.KeyPress.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPositionUpdate::kUsernameFieldNumber;
const int PlayerPositionUpdate::kXPosFieldNumber;
const int PlayerPositionUpdate::kYPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPositionUpdate::PlayerPositionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.PlayerPositionUpdate)
}

void PlayerPositionUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerPositionUpdate::PlayerPositionUpdate(const PlayerPositionUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.PlayerPositionUpdate)
}

void PlayerPositionUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xpos_ = 0;
  ypos_ = 0;
}

PlayerPositionUpdate::~PlayerPositionUpdate() {
  // @@protoc_insertion_point(destructor:GameDataUDP.PlayerPositionUpdate)
  SharedDtor();
}

void PlayerPositionUpdate::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerPositionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPositionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPositionUpdate_descriptor_;
}

const PlayerPositionUpdate& PlayerPositionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

PlayerPositionUpdate* PlayerPositionUpdate::default_instance_ = NULL;

PlayerPositionUpdate* PlayerPositionUpdate::New(::google::protobuf::Arena* arena) const {
  PlayerPositionUpdate* n = new PlayerPositionUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.PlayerPositionUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerPositionUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerPositionUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xpos_, ypos_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerPositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.PlayerPositionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.PlayerPositionUpdate.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xPos;
        break;
      }

      // optional float xPos = 2;
      case 2: {
        if (tag == 21) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yPos;
        break;
      }

      // optional float yPos = 3;
      case 3: {
        if (tag == 29) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.PlayerPositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.PlayerPositionUpdate)
  return false;
#undef DO_
}

void PlayerPositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.PlayerPositionUpdate)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.PlayerPositionUpdate.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xpos(), output);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ypos(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.PlayerPositionUpdate)
}

::google::protobuf::uint8* PlayerPositionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.PlayerPositionUpdate)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.PlayerPositionUpdate.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xpos(), target);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ypos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.PlayerPositionUpdate)
  return target;
}

int PlayerPositionUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.PlayerPositionUpdate)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    total_size += 1 + 4;
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.PlayerPositionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerPositionUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPositionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.PlayerPositionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.PlayerPositionUpdate)
    MergeFrom(*source);
  }
}

void PlayerPositionUpdate::MergeFrom(const PlayerPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.PlayerPositionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.xpos() != 0) {
    set_xpos(from.xpos());
  }
  if (from.ypos() != 0) {
    set_ypos(from.ypos());
  }
}

void PlayerPositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.PlayerPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPositionUpdate::CopyFrom(const PlayerPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.PlayerPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPositionUpdate::IsInitialized() const {

  return true;
}

void PlayerPositionUpdate::Swap(PlayerPositionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPositionUpdate::InternalSwap(PlayerPositionUpdate* other) {
  username_.Swap(&other->username_);
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPositionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPositionUpdate_descriptor_;
  metadata.reflection = PlayerPositionUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerPositionUpdate

// optional string username = 1;
void PlayerPositionUpdate::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerPositionUpdate::username() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerPositionUpdate.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerPositionUpdate::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerPositionUpdate.username)
}
 void PlayerPositionUpdate::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.PlayerPositionUpdate.username)
}
 void PlayerPositionUpdate::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.PlayerPositionUpdate.username)
}
 ::std::string* PlayerPositionUpdate::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.PlayerPositionUpdate.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerPositionUpdate::release_username() {
  // @@protoc_insertion_point(field_release:GameDataUDP.PlayerPositionUpdate.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerPositionUpdate::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.PlayerPositionUpdate.username)
}

// optional float xPos = 2;
void PlayerPositionUpdate::clear_xpos() {
  xpos_ = 0;
}
 float PlayerPositionUpdate::xpos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerPositionUpdate.xPos)
  return xpos_;
}
 void PlayerPositionUpdate::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerPositionUpdate.xPos)
}

// optional float yPos = 3;
void PlayerPositionUpdate::clear_ypos() {
  ypos_ = 0;
}
 float PlayerPositionUpdate::ypos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerPositionUpdate.yPos)
  return ypos_;
}
 void PlayerPositionUpdate::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerPositionUpdate.yPos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerVelcityUpdate::kUsernameFieldNumber;
const int PlayerVelcityUpdate::kXPosFieldNumber;
const int PlayerVelcityUpdate::kYPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerVelcityUpdate::PlayerVelcityUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.PlayerVelcityUpdate)
}

void PlayerVelcityUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerVelcityUpdate::PlayerVelcityUpdate(const PlayerVelcityUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.PlayerVelcityUpdate)
}

void PlayerVelcityUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xpos_ = 0;
  ypos_ = 0;
}

PlayerVelcityUpdate::~PlayerVelcityUpdate() {
  // @@protoc_insertion_point(destructor:GameDataUDP.PlayerVelcityUpdate)
  SharedDtor();
}

void PlayerVelcityUpdate::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerVelcityUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerVelcityUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerVelcityUpdate_descriptor_;
}

const PlayerVelcityUpdate& PlayerVelcityUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

PlayerVelcityUpdate* PlayerVelcityUpdate::default_instance_ = NULL;

PlayerVelcityUpdate* PlayerVelcityUpdate::New(::google::protobuf::Arena* arena) const {
  PlayerVelcityUpdate* n = new PlayerVelcityUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerVelcityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.PlayerVelcityUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerVelcityUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerVelcityUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xpos_, ypos_);
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerVelcityUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.PlayerVelcityUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.PlayerVelcityUpdate.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xPos;
        break;
      }

      // optional float xPos = 2;
      case 2: {
        if (tag == 21) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yPos;
        break;
      }

      // optional float yPos = 3;
      case 3: {
        if (tag == 29) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.PlayerVelcityUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.PlayerVelcityUpdate)
  return false;
#undef DO_
}

void PlayerVelcityUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.PlayerVelcityUpdate)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.PlayerVelcityUpdate.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xpos(), output);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ypos(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.PlayerVelcityUpdate)
}

::google::protobuf::uint8* PlayerVelcityUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.PlayerVelcityUpdate)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.PlayerVelcityUpdate.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xpos(), target);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ypos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.PlayerVelcityUpdate)
  return target;
}

int PlayerVelcityUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.PlayerVelcityUpdate)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    total_size += 1 + 4;
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerVelcityUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.PlayerVelcityUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerVelcityUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerVelcityUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.PlayerVelcityUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.PlayerVelcityUpdate)
    MergeFrom(*source);
  }
}

void PlayerVelcityUpdate::MergeFrom(const PlayerVelcityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.PlayerVelcityUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.xpos() != 0) {
    set_xpos(from.xpos());
  }
  if (from.ypos() != 0) {
    set_ypos(from.ypos());
  }
}

void PlayerVelcityUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.PlayerVelcityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerVelcityUpdate::CopyFrom(const PlayerVelcityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.PlayerVelcityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerVelcityUpdate::IsInitialized() const {

  return true;
}

void PlayerVelcityUpdate::Swap(PlayerVelcityUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerVelcityUpdate::InternalSwap(PlayerVelcityUpdate* other) {
  username_.Swap(&other->username_);
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerVelcityUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerVelcityUpdate_descriptor_;
  metadata.reflection = PlayerVelcityUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerVelcityUpdate

// optional string username = 1;
void PlayerVelcityUpdate::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerVelcityUpdate::username() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerVelcityUpdate.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerVelcityUpdate::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerVelcityUpdate.username)
}
 void PlayerVelcityUpdate::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.PlayerVelcityUpdate.username)
}
 void PlayerVelcityUpdate::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.PlayerVelcityUpdate.username)
}
 ::std::string* PlayerVelcityUpdate::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.PlayerVelcityUpdate.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerVelcityUpdate::release_username() {
  // @@protoc_insertion_point(field_release:GameDataUDP.PlayerVelcityUpdate.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerVelcityUpdate::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.PlayerVelcityUpdate.username)
}

// optional float xPos = 2;
void PlayerVelcityUpdate::clear_xpos() {
  xpos_ = 0;
}
 float PlayerVelcityUpdate::xpos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerVelcityUpdate.xPos)
  return xpos_;
}
 void PlayerVelcityUpdate::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerVelcityUpdate.xPos)
}

// optional float yPos = 3;
void PlayerVelcityUpdate::clear_ypos() {
  ypos_ = 0;
}
 float PlayerVelcityUpdate::ypos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PlayerVelcityUpdate.yPos)
  return ypos_;
}
 void PlayerVelcityUpdate::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PlayerVelcityUpdate.yPos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulletPositionUpdate::kOwnerFieldNumber;
const int BulletPositionUpdate::kXPosFieldNumber;
const int BulletPositionUpdate::kYPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulletPositionUpdate::BulletPositionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.BulletPositionUpdate)
}

void BulletPositionUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BulletPositionUpdate::BulletPositionUpdate(const BulletPositionUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.BulletPositionUpdate)
}

void BulletPositionUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xpos_ = 0;
  ypos_ = 0;
}

BulletPositionUpdate::~BulletPositionUpdate() {
  // @@protoc_insertion_point(destructor:GameDataUDP.BulletPositionUpdate)
  SharedDtor();
}

void BulletPositionUpdate::SharedDtor() {
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BulletPositionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BulletPositionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BulletPositionUpdate_descriptor_;
}

const BulletPositionUpdate& BulletPositionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

BulletPositionUpdate* BulletPositionUpdate::default_instance_ = NULL;

BulletPositionUpdate* BulletPositionUpdate::New(::google::protobuf::Arena* arena) const {
  BulletPositionUpdate* n = new BulletPositionUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BulletPositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.BulletPositionUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BulletPositionUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BulletPositionUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xpos_, ypos_);
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BulletPositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.BulletPositionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string owner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.BulletPositionUpdate.owner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xPos;
        break;
      }

      // optional float xPos = 2;
      case 2: {
        if (tag == 21) {
         parse_xPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yPos;
        break;
      }

      // optional float yPos = 3;
      case 3: {
        if (tag == 29) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.BulletPositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.BulletPositionUpdate)
  return false;
#undef DO_
}

void BulletPositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.BulletPositionUpdate)
  // optional string owner = 1;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.BulletPositionUpdate.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->owner(), output);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xpos(), output);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ypos(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.BulletPositionUpdate)
}

::google::protobuf::uint8* BulletPositionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.BulletPositionUpdate)
  // optional string owner = 1;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.BulletPositionUpdate.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->owner(), target);
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xpos(), target);
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ypos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.BulletPositionUpdate)
  return target;
}

int BulletPositionUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.BulletPositionUpdate)
  int total_size = 0;

  // optional string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // optional float xPos = 2;
  if (this->xpos() != 0) {
    total_size += 1 + 4;
  }

  // optional float yPos = 3;
  if (this->ypos() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletPositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.BulletPositionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BulletPositionUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BulletPositionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.BulletPositionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.BulletPositionUpdate)
    MergeFrom(*source);
  }
}

void BulletPositionUpdate::MergeFrom(const BulletPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.BulletPositionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.xpos() != 0) {
    set_xpos(from.xpos());
  }
  if (from.ypos() != 0) {
    set_ypos(from.ypos());
  }
}

void BulletPositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.BulletPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletPositionUpdate::CopyFrom(const BulletPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.BulletPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletPositionUpdate::IsInitialized() const {

  return true;
}

void BulletPositionUpdate::Swap(BulletPositionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulletPositionUpdate::InternalSwap(BulletPositionUpdate* other) {
  owner_.Swap(&other->owner_);
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BulletPositionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BulletPositionUpdate_descriptor_;
  metadata.reflection = BulletPositionUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BulletPositionUpdate

// optional string owner = 1;
void BulletPositionUpdate::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BulletPositionUpdate::owner() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.BulletPositionUpdate.owner)
  return owner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletPositionUpdate::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.BulletPositionUpdate.owner)
}
 void BulletPositionUpdate::set_owner(const char* value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.BulletPositionUpdate.owner)
}
 void BulletPositionUpdate::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.BulletPositionUpdate.owner)
}
 ::std::string* BulletPositionUpdate::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.BulletPositionUpdate.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BulletPositionUpdate::release_owner() {
  // @@protoc_insertion_point(field_release:GameDataUDP.BulletPositionUpdate.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BulletPositionUpdate::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.BulletPositionUpdate.owner)
}

// optional float xPos = 2;
void BulletPositionUpdate::clear_xpos() {
  xpos_ = 0;
}
 float BulletPositionUpdate::xpos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.BulletPositionUpdate.xPos)
  return xpos_;
}
 void BulletPositionUpdate::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.BulletPositionUpdate.xPos)
}

// optional float yPos = 3;
void BulletPositionUpdate::clear_ypos() {
  ypos_ = 0;
}
 float BulletPositionUpdate::ypos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.BulletPositionUpdate.yPos)
  return ypos_;
}
 void BulletPositionUpdate::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.BulletPositionUpdate.yPos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionUpdate::kPlayerHitFieldNumber;
const int CollisionUpdate::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionUpdate::CollisionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.CollisionUpdate)
}

void CollisionUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CollisionUpdate::CollisionUpdate(const CollisionUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.CollisionUpdate)
}

void CollisionUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerhit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CollisionUpdate::~CollisionUpdate() {
  // @@protoc_insertion_point(destructor:GameDataUDP.CollisionUpdate)
  SharedDtor();
}

void CollisionUpdate::SharedDtor() {
  playerhit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CollisionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionUpdate_descriptor_;
}

const CollisionUpdate& CollisionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

CollisionUpdate* CollisionUpdate::default_instance_ = NULL;

CollisionUpdate* CollisionUpdate::New(::google::protobuf::Arena* arena) const {
  CollisionUpdate* n = new CollisionUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.CollisionUpdate)
  playerhit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CollisionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.CollisionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerHit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerhit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerhit().data(), this->playerhit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.CollisionUpdate.playerHit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional string object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataUDP.CollisionUpdate.object"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.CollisionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.CollisionUpdate)
  return false;
#undef DO_
}

void CollisionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.CollisionUpdate)
  // optional string playerHit = 1;
  if (this->playerhit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerhit().data(), this->playerhit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.CollisionUpdate.playerHit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerhit(), output);
  }

  // optional string object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.CollisionUpdate.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.CollisionUpdate)
}

::google::protobuf::uint8* CollisionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.CollisionUpdate)
  // optional string playerHit = 1;
  if (this->playerhit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerhit().data(), this->playerhit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.CollisionUpdate.playerHit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerhit(), target);
  }

  // optional string object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataUDP.CollisionUpdate.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.CollisionUpdate)
  return target;
}

int CollisionUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.CollisionUpdate)
  int total_size = 0;

  // optional string playerHit = 1;
  if (this->playerhit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerhit());
  }

  // optional string object = 2;
  if (this->object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.CollisionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CollisionUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.CollisionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.CollisionUpdate)
    MergeFrom(*source);
  }
}

void CollisionUpdate::MergeFrom(const CollisionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.CollisionUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.playerhit().size() > 0) {

    playerhit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerhit_);
  }
  if (from.object().size() > 0) {

    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
}

void CollisionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.CollisionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionUpdate::CopyFrom(const CollisionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.CollisionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionUpdate::IsInitialized() const {

  return true;
}

void CollisionUpdate::Swap(CollisionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionUpdate::InternalSwap(CollisionUpdate* other) {
  playerhit_.Swap(&other->playerhit_);
  object_.Swap(&other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionUpdate_descriptor_;
  metadata.reflection = CollisionUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollisionUpdate

// optional string playerHit = 1;
void CollisionUpdate::clear_playerhit() {
  playerhit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CollisionUpdate::playerhit() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.CollisionUpdate.playerHit)
  return playerhit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionUpdate::set_playerhit(const ::std::string& value) {
  
  playerhit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.CollisionUpdate.playerHit)
}
 void CollisionUpdate::set_playerhit(const char* value) {
  
  playerhit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.CollisionUpdate.playerHit)
}
 void CollisionUpdate::set_playerhit(const char* value, size_t size) {
  
  playerhit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.CollisionUpdate.playerHit)
}
 ::std::string* CollisionUpdate::mutable_playerhit() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.CollisionUpdate.playerHit)
  return playerhit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollisionUpdate::release_playerhit() {
  // @@protoc_insertion_point(field_release:GameDataUDP.CollisionUpdate.playerHit)
  
  return playerhit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionUpdate::set_allocated_playerhit(::std::string* playerhit) {
  if (playerhit != NULL) {
    
  } else {
    
  }
  playerhit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerhit);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.CollisionUpdate.playerHit)
}

// optional string object = 2;
void CollisionUpdate::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CollisionUpdate::object() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.CollisionUpdate.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionUpdate::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataUDP.CollisionUpdate.object)
}
 void CollisionUpdate::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataUDP.CollisionUpdate.object)
}
 void CollisionUpdate::set_object(const char* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataUDP.CollisionUpdate.object)
}
 ::std::string* CollisionUpdate::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:GameDataUDP.CollisionUpdate.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CollisionUpdate::release_object() {
  // @@protoc_insertion_point(field_release:GameDataUDP.CollisionUpdate.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CollisionUpdate::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.CollisionUpdate.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataMessage::kKeyPressFieldNumber;
const int DataMessage::kPlayerPosUpdateFieldNumber;
const int DataMessage::kPlayerVelocityUpdateFieldNumber;
const int DataMessage::kBulletPosUpdateFieldNumber;
const int DataMessage::kCollisionUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataMessage::DataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataUDP.DataMessage)
}

void DataMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  keypress_ = const_cast< ::GameDataUDP::KeyPress*>(&::GameDataUDP::KeyPress::default_instance());
  playerposupdate_ = const_cast< ::GameDataUDP::PlayerPositionUpdate*>(&::GameDataUDP::PlayerPositionUpdate::default_instance());
  playervelocityupdate_ = const_cast< ::GameDataUDP::PlayerVelcityUpdate*>(&::GameDataUDP::PlayerVelcityUpdate::default_instance());
  bulletposupdate_ = const_cast< ::GameDataUDP::BulletPositionUpdate*>(&::GameDataUDP::BulletPositionUpdate::default_instance());
  collisionupdate_ = const_cast< ::GameDataUDP::CollisionUpdate*>(&::GameDataUDP::CollisionUpdate::default_instance());
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataUDP.DataMessage)
}

void DataMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  keypress_ = NULL;
  playerposupdate_ = NULL;
  playervelocityupdate_ = NULL;
  bulletposupdate_ = NULL;
  collisionupdate_ = NULL;
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:GameDataUDP.DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (this != default_instance_) {
    delete keypress_;
    delete playerposupdate_;
    delete playervelocityupdate_;
    delete bulletposupdate_;
    delete collisionupdate_;
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataUDP_2eproto();
  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New(::google::protobuf::Arena* arena) const {
  DataMessage* n = new DataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataUDP.DataMessage)
  if (GetArenaNoVirtual() == NULL && keypress_ != NULL) delete keypress_;
  keypress_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerposupdate_ != NULL) delete playerposupdate_;
  playerposupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && playervelocityupdate_ != NULL) delete playervelocityupdate_;
  playervelocityupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && bulletposupdate_ != NULL) delete bulletposupdate_;
  bulletposupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && collisionupdate_ != NULL) delete collisionupdate_;
  collisionupdate_ = NULL;
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataUDP.DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameDataUDP.KeyPress keyPress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keypress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerPosUpdate;
        break;
      }

      // optional .GameDataUDP.PlayerPositionUpdate playerPosUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_playerPosUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerposupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerVelocityUpdate;
        break;
      }

      // optional .GameDataUDP.PlayerVelcityUpdate playerVelocityUpdate = 3;
      case 3: {
        if (tag == 26) {
         parse_playerVelocityUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playervelocityupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bulletPosUpdate;
        break;
      }

      // optional .GameDataUDP.BulletPositionUpdate bulletPosUpdate = 4;
      case 4: {
        if (tag == 34) {
         parse_bulletPosUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bulletposupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_collisionUpdate;
        break;
      }

      // optional .GameDataUDP.CollisionUpdate collisionUpdate = 5;
      case 5: {
        if (tag == 42) {
         parse_collisionUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collisionupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataUDP.DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataUDP.DataMessage)
  return false;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataUDP.DataMessage)
  // optional .GameDataUDP.KeyPress keyPress = 1;
  if (this->has_keypress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->keypress_, output);
  }

  // optional .GameDataUDP.PlayerPositionUpdate playerPosUpdate = 2;
  if (this->has_playerposupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerposupdate_, output);
  }

  // optional .GameDataUDP.PlayerVelcityUpdate playerVelocityUpdate = 3;
  if (this->has_playervelocityupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->playervelocityupdate_, output);
  }

  // optional .GameDataUDP.BulletPositionUpdate bulletPosUpdate = 4;
  if (this->has_bulletposupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bulletposupdate_, output);
  }

  // optional .GameDataUDP.CollisionUpdate collisionUpdate = 5;
  if (this->has_collisionupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->collisionupdate_, output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataUDP.DataMessage)
}

::google::protobuf::uint8* DataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataUDP.DataMessage)
  // optional .GameDataUDP.KeyPress keyPress = 1;
  if (this->has_keypress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->keypress_, false, target);
  }

  // optional .GameDataUDP.PlayerPositionUpdate playerPosUpdate = 2;
  if (this->has_playerposupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->playerposupdate_, false, target);
  }

  // optional .GameDataUDP.PlayerVelcityUpdate playerVelocityUpdate = 3;
  if (this->has_playervelocityupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->playervelocityupdate_, false, target);
  }

  // optional .GameDataUDP.BulletPositionUpdate bulletPosUpdate = 4;
  if (this->has_bulletposupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bulletposupdate_, false, target);
  }

  // optional .GameDataUDP.CollisionUpdate collisionUpdate = 5;
  if (this->has_collisionupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->collisionupdate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataUDP.DataMessage)
  return target;
}

int DataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataUDP.DataMessage)
  int total_size = 0;

  // optional .GameDataUDP.KeyPress keyPress = 1;
  if (this->has_keypress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keypress_);
  }

  // optional .GameDataUDP.PlayerPositionUpdate playerPosUpdate = 2;
  if (this->has_playerposupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerposupdate_);
  }

  // optional .GameDataUDP.PlayerVelcityUpdate playerVelocityUpdate = 3;
  if (this->has_playervelocityupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playervelocityupdate_);
  }

  // optional .GameDataUDP.BulletPositionUpdate bulletPosUpdate = 4;
  if (this->has_bulletposupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bulletposupdate_);
  }

  // optional .GameDataUDP.CollisionUpdate collisionUpdate = 5;
  if (this->has_collisionupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->collisionupdate_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataUDP.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataUDP.DataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataUDP.DataMessage)
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataUDP.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_keypress()) {
    mutable_keypress()->::GameDataUDP::KeyPress::MergeFrom(from.keypress());
  }
  if (from.has_playerposupdate()) {
    mutable_playerposupdate()->::GameDataUDP::PlayerPositionUpdate::MergeFrom(from.playerposupdate());
  }
  if (from.has_playervelocityupdate()) {
    mutable_playervelocityupdate()->::GameDataUDP::PlayerVelcityUpdate::MergeFrom(from.playervelocityupdate());
  }
  if (from.has_bulletposupdate()) {
    mutable_bulletposupdate()->::GameDataUDP::BulletPositionUpdate::MergeFrom(from.bulletposupdate());
  }
  if (from.has_collisionupdate()) {
    mutable_collisionupdate()->::GameDataUDP::CollisionUpdate::MergeFrom(from.collisionupdate());
  }
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataUDP.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataUDP.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {

  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataMessage::InternalSwap(DataMessage* other) {
  std::swap(keypress_, other->keypress_);
  std::swap(playerposupdate_, other->playerposupdate_);
  std::swap(playervelocityupdate_, other->playervelocityupdate_);
  std::swap(bulletposupdate_, other->bulletposupdate_);
  std::swap(collisionupdate_, other->collisionupdate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataMessage

// optional .GameDataUDP.KeyPress keyPress = 1;
bool DataMessage::has_keypress() const {
  return !_is_default_instance_ && keypress_ != NULL;
}
void DataMessage::clear_keypress() {
  if (GetArenaNoVirtual() == NULL && keypress_ != NULL) delete keypress_;
  keypress_ = NULL;
}
const ::GameDataUDP::KeyPress& DataMessage::keypress() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.keyPress)
  return keypress_ != NULL ? *keypress_ : *default_instance_->keypress_;
}
::GameDataUDP::KeyPress* DataMessage::mutable_keypress() {
  
  if (keypress_ == NULL) {
    keypress_ = new ::GameDataUDP::KeyPress;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.keyPress)
  return keypress_;
}
::GameDataUDP::KeyPress* DataMessage::release_keypress() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.keyPress)
  
  ::GameDataUDP::KeyPress* temp = keypress_;
  keypress_ = NULL;
  return temp;
}
void DataMessage::set_allocated_keypress(::GameDataUDP::KeyPress* keypress) {
  delete keypress_;
  keypress_ = keypress;
  if (keypress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.keyPress)
}

// optional .GameDataUDP.PlayerPositionUpdate playerPosUpdate = 2;
bool DataMessage::has_playerposupdate() const {
  return !_is_default_instance_ && playerposupdate_ != NULL;
}
void DataMessage::clear_playerposupdate() {
  if (GetArenaNoVirtual() == NULL && playerposupdate_ != NULL) delete playerposupdate_;
  playerposupdate_ = NULL;
}
const ::GameDataUDP::PlayerPositionUpdate& DataMessage::playerposupdate() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.playerPosUpdate)
  return playerposupdate_ != NULL ? *playerposupdate_ : *default_instance_->playerposupdate_;
}
::GameDataUDP::PlayerPositionUpdate* DataMessage::mutable_playerposupdate() {
  
  if (playerposupdate_ == NULL) {
    playerposupdate_ = new ::GameDataUDP::PlayerPositionUpdate;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.playerPosUpdate)
  return playerposupdate_;
}
::GameDataUDP::PlayerPositionUpdate* DataMessage::release_playerposupdate() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.playerPosUpdate)
  
  ::GameDataUDP::PlayerPositionUpdate* temp = playerposupdate_;
  playerposupdate_ = NULL;
  return temp;
}
void DataMessage::set_allocated_playerposupdate(::GameDataUDP::PlayerPositionUpdate* playerposupdate) {
  delete playerposupdate_;
  playerposupdate_ = playerposupdate;
  if (playerposupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.playerPosUpdate)
}

// optional .GameDataUDP.PlayerVelcityUpdate playerVelocityUpdate = 3;
bool DataMessage::has_playervelocityupdate() const {
  return !_is_default_instance_ && playervelocityupdate_ != NULL;
}
void DataMessage::clear_playervelocityupdate() {
  if (GetArenaNoVirtual() == NULL && playervelocityupdate_ != NULL) delete playervelocityupdate_;
  playervelocityupdate_ = NULL;
}
const ::GameDataUDP::PlayerVelcityUpdate& DataMessage::playervelocityupdate() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.playerVelocityUpdate)
  return playervelocityupdate_ != NULL ? *playervelocityupdate_ : *default_instance_->playervelocityupdate_;
}
::GameDataUDP::PlayerVelcityUpdate* DataMessage::mutable_playervelocityupdate() {
  
  if (playervelocityupdate_ == NULL) {
    playervelocityupdate_ = new ::GameDataUDP::PlayerVelcityUpdate;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.playerVelocityUpdate)
  return playervelocityupdate_;
}
::GameDataUDP::PlayerVelcityUpdate* DataMessage::release_playervelocityupdate() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.playerVelocityUpdate)
  
  ::GameDataUDP::PlayerVelcityUpdate* temp = playervelocityupdate_;
  playervelocityupdate_ = NULL;
  return temp;
}
void DataMessage::set_allocated_playervelocityupdate(::GameDataUDP::PlayerVelcityUpdate* playervelocityupdate) {
  delete playervelocityupdate_;
  playervelocityupdate_ = playervelocityupdate;
  if (playervelocityupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.playerVelocityUpdate)
}

// optional .GameDataUDP.BulletPositionUpdate bulletPosUpdate = 4;
bool DataMessage::has_bulletposupdate() const {
  return !_is_default_instance_ && bulletposupdate_ != NULL;
}
void DataMessage::clear_bulletposupdate() {
  if (GetArenaNoVirtual() == NULL && bulletposupdate_ != NULL) delete bulletposupdate_;
  bulletposupdate_ = NULL;
}
const ::GameDataUDP::BulletPositionUpdate& DataMessage::bulletposupdate() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.bulletPosUpdate)
  return bulletposupdate_ != NULL ? *bulletposupdate_ : *default_instance_->bulletposupdate_;
}
::GameDataUDP::BulletPositionUpdate* DataMessage::mutable_bulletposupdate() {
  
  if (bulletposupdate_ == NULL) {
    bulletposupdate_ = new ::GameDataUDP::BulletPositionUpdate;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.bulletPosUpdate)
  return bulletposupdate_;
}
::GameDataUDP::BulletPositionUpdate* DataMessage::release_bulletposupdate() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.bulletPosUpdate)
  
  ::GameDataUDP::BulletPositionUpdate* temp = bulletposupdate_;
  bulletposupdate_ = NULL;
  return temp;
}
void DataMessage::set_allocated_bulletposupdate(::GameDataUDP::BulletPositionUpdate* bulletposupdate) {
  delete bulletposupdate_;
  bulletposupdate_ = bulletposupdate;
  if (bulletposupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.bulletPosUpdate)
}

// optional .GameDataUDP.CollisionUpdate collisionUpdate = 5;
bool DataMessage::has_collisionupdate() const {
  return !_is_default_instance_ && collisionupdate_ != NULL;
}
void DataMessage::clear_collisionupdate() {
  if (GetArenaNoVirtual() == NULL && collisionupdate_ != NULL) delete collisionupdate_;
  collisionupdate_ = NULL;
}
const ::GameDataUDP::CollisionUpdate& DataMessage::collisionupdate() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.collisionUpdate)
  return collisionupdate_ != NULL ? *collisionupdate_ : *default_instance_->collisionupdate_;
}
::GameDataUDP::CollisionUpdate* DataMessage::mutable_collisionupdate() {
  
  if (collisionupdate_ == NULL) {
    collisionupdate_ = new ::GameDataUDP::CollisionUpdate;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.collisionUpdate)
  return collisionupdate_;
}
::GameDataUDP::CollisionUpdate* DataMessage::release_collisionupdate() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.collisionUpdate)
  
  ::GameDataUDP::CollisionUpdate* temp = collisionupdate_;
  collisionupdate_ = NULL;
  return temp;
}
void DataMessage::set_allocated_collisionupdate(::GameDataUDP::CollisionUpdate* collisionupdate) {
  delete collisionupdate_;
  collisionupdate_ = collisionupdate;
  if (collisionupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.collisionUpdate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameDataUDP

// @@protoc_insertion_point(global_scope)
