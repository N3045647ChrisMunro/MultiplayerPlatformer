// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDataTCP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameDataTCP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameDataTCP {

namespace {

const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameDataTCP_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameDataTCP_2eproto() {
  protobuf_AddDesc_GameDataTCP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameDataTCP.proto");
  GOOGLE_CHECK(file != NULL);
  Register_descriptor_ = file->message_type(0);
  static const int Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, password_),
  };
  Register_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      -1,
      -1,
      -1,
      sizeof(Register),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _is_default_instance_));
  Login_descriptor_ = file->message_type(1);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      -1,
      -1,
      -1,
      sizeof(Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _is_default_instance_));
  ChatMessage_descriptor_ = file->message_type(2);
  static const int ChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, recipient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chatmsg_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _is_default_instance_));
  DataMessage_descriptor_ = file->message_type(3);
  static const int DataMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, chatmessage_),
  };
  DataMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameDataTCP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataMessage_descriptor_, &DataMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameDataTCP_2eproto() {
  delete Register::default_instance_;
  delete Register_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
}

void protobuf_AddDesc_GameDataTCP_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameDataTCP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameDataTCP.proto\022\013GameDataTCP\".\n\010Regi"
    "ster\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
    "\"+\n\005Login\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030"
    "\002 \001(\t\"1\n\013ChatMessage\022\021\n\trecipient\030\001 \001(\t\022"
    "\017\n\007chatMsg\030\002 \001(\t\"\210\001\n\013DataMessage\022\'\n\010regi"
    "ster\030\001 \001(\0132\025.GameDataTCP.Register\022!\n\005log"
    "in\030\002 \001(\0132\022.GameDataTCP.Login\022-\n\013chatMess"
    "age\030\003 \001(\0132\030.GameDataTCP.ChatMessageb\006pro"
    "to3", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameDataTCP.proto", &protobuf_RegisterTypes);
  Register::default_instance_ = new Register();
  Login::default_instance_ = new Login();
  ChatMessage::default_instance_ = new ChatMessage();
  DataMessage::default_instance_ = new DataMessage();
  Register::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  DataMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameDataTCP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameDataTCP_2eproto {
  StaticDescriptorInitializer_GameDataTCP_2eproto() {
    protobuf_AddDesc_GameDataTCP_2eproto();
  }
} static_descriptor_initializer_GameDataTCP_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Register::kUsernameFieldNumber;
const int Register::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Register::Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataTCP.Register)
}

void Register::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Register::Register(const Register& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataTCP.Register)
}

void Register::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:GameDataTCP.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataTCP_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New(::google::protobuf::Arena* arena) const {
  Register* n = new Register;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataTCP.Register)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataTCP.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.Register.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.Register.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataTCP.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataTCP.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataTCP.Register)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Register.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Register.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataTCP.Register)
}

::google::protobuf::uint8* Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataTCP.Register)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Register.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Register.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataTCP.Register)
  return target;
}

int Register::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataTCP.Register)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataTCP.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Register* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataTCP.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataTCP.Register)
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataTCP.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataTCP.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataTCP.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Register::InternalSwap(Register* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Register

// optional string username = 1;
void Register::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Register::username() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.Register.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.Register.username)
}
 void Register::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.Register.username)
}
 void Register::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.Register.username)
}
 ::std::string* Register::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.Register.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Register::release_username() {
  // @@protoc_insertion_point(field_release:GameDataTCP.Register.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.Register.username)
}

// optional string password = 2;
void Register::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Register::password() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.Register.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.Register.password)
}
 void Register::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.Register.password)
}
 void Register::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.Register.password)
}
 ::std::string* Register::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.Register.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Register::release_password() {
  // @@protoc_insertion_point(field_release:GameDataTCP.Register.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.Register.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kUsernameFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataTCP.Login)
}

void Login::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Login::Login(const Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataTCP.Login)
}

void Login::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:GameDataTCP.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataTCP_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataTCP.Login)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataTCP.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.Login.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.Login.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataTCP.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataTCP.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataTCP.Login)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Login.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataTCP.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataTCP.Login)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Login.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataTCP.Login)
  return target;
}

int Login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataTCP.Login)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataTCP.Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataTCP.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataTCP.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataTCP.Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataTCP.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataTCP.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// optional string username = 1;
void Login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.Login.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.Login.username)
}
 void Login::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.Login.username)
}
 void Login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.Login.username)
}
 ::std::string* Login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.Login.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:GameDataTCP.Login.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.Login.username)
}

// optional string password = 2;
void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.Login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.Login.password)
}
 void Login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.Login.password)
}
 void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.Login.password)
}
 ::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:GameDataTCP.Login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.Login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kRecipientFieldNumber;
const int ChatMessage::kChatMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataTCP.ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataTCP.ChatMessage)
}

void ChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:GameDataTCP.ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataTCP_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataTCP.ChatMessage)
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataTCP.ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string recipient = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipient().data(), this->recipient().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.ChatMessage.recipient"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatMsg;
        break;
      }

      // optional string chatMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_chatMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameDataTCP.ChatMessage.chatMsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataTCP.ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataTCP.ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataTCP.ChatMessage)
  // optional string recipient = 1;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.ChatMessage.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->recipient(), output);
  }

  // optional string chatMsg = 2;
  if (this->chatmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.ChatMessage.chatMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataTCP.ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataTCP.ChatMessage)
  // optional string recipient = 1;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.ChatMessage.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recipient(), target);
  }

  // optional string chatMsg = 2;
  if (this->chatmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GameDataTCP.ChatMessage.chatMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataTCP.ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataTCP.ChatMessage)
  int total_size = 0;

  // optional string recipient = 1;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recipient());
  }

  // optional string chatMsg = 2;
  if (this->chatmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataTCP.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataTCP.ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataTCP.ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataTCP.ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.recipient().size() > 0) {

    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  if (from.chatmsg().size() > 0) {

    chatmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmsg_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataTCP.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataTCP.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  recipient_.Swap(&other->recipient_);
  chatmsg_.Swap(&other->chatmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional string recipient = 1;
void ChatMessage::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::recipient() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.ChatMessage.recipient)
  return recipient_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.ChatMessage.recipient)
}
 void ChatMessage::set_recipient(const char* value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.ChatMessage.recipient)
}
 void ChatMessage::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.ChatMessage.recipient)
}
 ::std::string* ChatMessage::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.ChatMessage.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_recipient() {
  // @@protoc_insertion_point(field_release:GameDataTCP.ChatMessage.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.ChatMessage.recipient)
}

// optional string chatMsg = 2;
void ChatMessage::clear_chatmsg() {
  chatmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::chatmsg() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.ChatMessage.chatMsg)
  return chatmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_chatmsg(const ::std::string& value) {
  
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameDataTCP.ChatMessage.chatMsg)
}
 void ChatMessage::set_chatmsg(const char* value) {
  
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameDataTCP.ChatMessage.chatMsg)
}
 void ChatMessage::set_chatmsg(const char* value, size_t size) {
  
  chatmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameDataTCP.ChatMessage.chatMsg)
}
 ::std::string* ChatMessage::mutable_chatmsg() {
  
  // @@protoc_insertion_point(field_mutable:GameDataTCP.ChatMessage.chatMsg)
  return chatmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_chatmsg() {
  // @@protoc_insertion_point(field_release:GameDataTCP.ChatMessage.chatMsg)
  
  return chatmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_chatmsg(::std::string* chatmsg) {
  if (chatmsg != NULL) {
    
  } else {
    
  }
  chatmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmsg);
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.ChatMessage.chatMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataMessage::kRegisterFieldNumber;
const int DataMessage::kLoginFieldNumber;
const int DataMessage::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataMessage::DataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameDataTCP.DataMessage)
}

void DataMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  register__ = const_cast< ::GameDataTCP::Register*>(&::GameDataTCP::Register::default_instance());
  login_ = const_cast< ::GameDataTCP::Login*>(&::GameDataTCP::Login::default_instance());
  chatmessage_ = const_cast< ::GameDataTCP::ChatMessage*>(&::GameDataTCP::ChatMessage::default_instance());
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameDataTCP.DataMessage)
}

void DataMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  register__ = NULL;
  login_ = NULL;
  chatmessage_ = NULL;
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:GameDataTCP.DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (this != default_instance_) {
    //delete register__;
    //delete login_;
    //delete chatmessage_;
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDataTCP_2eproto();
  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New(::google::protobuf::Arena* arena) const {
  DataMessage* n = new DataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameDataTCP.DataMessage)
  if (GetArenaNoVirtual() == NULL && register__ != NULL) delete register__;
  register__ = NULL;
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
  if (GetArenaNoVirtual() == NULL && chatmessage_ != NULL) delete chatmessage_;
  chatmessage_ = NULL;
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameDataTCP.DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameDataTCP.Register register = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional .GameDataTCP.Login login = 2;
      case 2: {
        if (tag == 18) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chatMessage;
        break;
      }

      // optional .GameDataTCP.ChatMessage chatMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_chatMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameDataTCP.DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameDataTCP.DataMessage)
  return false;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameDataTCP.DataMessage)
  // optional .GameDataTCP.Register register = 1;
  if (this->has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->register__, output);
  }

  // optional .GameDataTCP.Login login = 2;
  if (this->has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->login_, output);
  }

  // optional .GameDataTCP.ChatMessage chatMessage = 3;
  if (this->has_chatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->chatmessage_, output);
  }

  // @@protoc_insertion_point(serialize_end:GameDataTCP.DataMessage)
}

::google::protobuf::uint8* DataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameDataTCP.DataMessage)
  // optional .GameDataTCP.Register register = 1;
  if (this->has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->register__, false, target);
  }

  // optional .GameDataTCP.Login login = 2;
  if (this->has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->login_, false, target);
  }

  // optional .GameDataTCP.ChatMessage chatMessage = 3;
  if (this->has_chatmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->chatmessage_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameDataTCP.DataMessage)
  return target;
}

int DataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameDataTCP.DataMessage)
  int total_size = 0;

  // optional .GameDataTCP.Register register = 1;
  if (this->has_register_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->register__);
  }

  // optional .GameDataTCP.Login login = 2;
  if (this->has_login()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_);
  }

  // optional .GameDataTCP.ChatMessage chatMessage = 3;
  if (this->has_chatmessage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chatmessage_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameDataTCP.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameDataTCP.DataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameDataTCP.DataMessage)
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameDataTCP.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_register_()) {
    mutable_register_()->::GameDataTCP::Register::MergeFrom(from.register_());
  }
  if (from.has_login()) {
    mutable_login()->::GameDataTCP::Login::MergeFrom(from.login());
  }
  if (from.has_chatmessage()) {
    mutable_chatmessage()->::GameDataTCP::ChatMessage::MergeFrom(from.chatmessage());
  }
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameDataTCP.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameDataTCP.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {

  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataMessage::InternalSwap(DataMessage* other) {
  std::swap(register__, other->register__);
  std::swap(login_, other->login_);
  std::swap(chatmessage_, other->chatmessage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataMessage

// optional .GameDataTCP.Register register = 1;
bool DataMessage::has_register_() const {
  return !_is_default_instance_ && register__ != NULL;
}
void DataMessage::clear_register_() {
  if (GetArenaNoVirtual() == NULL && register__ != NULL) delete register__;
  register__ = NULL;
}
const ::GameDataTCP::Register& DataMessage::register_() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.DataMessage.register)
  return register__ != NULL ? *register__ : *default_instance_->register__;
}
::GameDataTCP::Register* DataMessage::mutable_register_() {
  
  if (register__ == NULL) {
    register__ = new ::GameDataTCP::Register;
  }
  // @@protoc_insertion_point(field_mutable:GameDataTCP.DataMessage.register)
  return register__;
}
::GameDataTCP::Register* DataMessage::release_register_() {
  // @@protoc_insertion_point(field_release:GameDataTCP.DataMessage.register)
  
  ::GameDataTCP::Register* temp = register__;
  register__ = NULL;
  return temp;
}
void DataMessage::set_allocated_register_(::GameDataTCP::Register* register_) {
  delete register__;
  register__ = register_;
  if (register_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.DataMessage.register)
}

// optional .GameDataTCP.Login login = 2;
bool DataMessage::has_login() const {
  return !_is_default_instance_ && login_ != NULL;
}
void DataMessage::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
}
const ::GameDataTCP::Login& DataMessage::login() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.DataMessage.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
::GameDataTCP::Login* DataMessage::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::GameDataTCP::Login;
  }
  // @@protoc_insertion_point(field_mutable:GameDataTCP.DataMessage.login)
  return login_;
}
::GameDataTCP::Login* DataMessage::release_login() {
  // @@protoc_insertion_point(field_release:GameDataTCP.DataMessage.login)
  
  ::GameDataTCP::Login* temp = login_;
  login_ = NULL;
  return temp;
}
void DataMessage::set_allocated_login(::GameDataTCP::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.DataMessage.login)
}

// optional .GameDataTCP.ChatMessage chatMessage = 3;
bool DataMessage::has_chatmessage() const {
  return !_is_default_instance_ && chatmessage_ != NULL;
}
void DataMessage::clear_chatmessage() {
  if (GetArenaNoVirtual() == NULL && chatmessage_ != NULL) delete chatmessage_;
  chatmessage_ = NULL;
}
const ::GameDataTCP::ChatMessage& DataMessage::chatmessage() const {
  // @@protoc_insertion_point(field_get:GameDataTCP.DataMessage.chatMessage)
  return chatmessage_ != NULL ? *chatmessage_ : *default_instance_->chatmessage_;
}
::GameDataTCP::ChatMessage* DataMessage::mutable_chatmessage() {
  
  if (chatmessage_ == NULL) {
    chatmessage_ = new ::GameDataTCP::ChatMessage;
  }
  // @@protoc_insertion_point(field_mutable:GameDataTCP.DataMessage.chatMessage)
  return chatmessage_;
}
::GameDataTCP::ChatMessage* DataMessage::release_chatmessage() {
  // @@protoc_insertion_point(field_release:GameDataTCP.DataMessage.chatMessage)
  
  ::GameDataTCP::ChatMessage* temp = chatmessage_;
  chatmessage_ = NULL;
  return temp;
}
void DataMessage::set_allocated_chatmessage(::GameDataTCP::ChatMessage* chatmessage) {
  delete chatmessage_;
  chatmessage_ = chatmessage;
  if (chatmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataTCP.DataMessage.chatMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GameDataTCP

// @@protoc_insertion_point(global_scope)
