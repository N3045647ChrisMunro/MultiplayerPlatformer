// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDataUDP.proto

#ifndef PROTOBUF_GameDataUDP_2eproto__INCLUDED
#define PROTOBUF_GameDataUDP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GameDataUDP {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GameDataUDP_2eproto();
void protobuf_AssignDesc_GameDataUDP_2eproto();
void protobuf_ShutdownFile_GameDataUDP_2eproto();

class DataMessage;
class PositionUpdate;

// ===================================================================

class PositionUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameDataUDP.PositionUpdate) */ {
 public:
  PositionUpdate();
  virtual ~PositionUpdate();

  PositionUpdate(const PositionUpdate& from);

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionUpdate& default_instance();

  void Swap(PositionUpdate* other);

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const { return New(NULL); }

  PositionUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PositionUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xPos = 1;
  void clear_xpos();
  static const int kXPosFieldNumber = 1;
  float xpos() const;
  void set_xpos(float value);

  // optional float yPos = 2;
  void clear_ypos();
  static const int kYPosFieldNumber = 2;
  float ypos() const;
  void set_ypos(float value);

  // @@protoc_insertion_point(class_scope:GameDataUDP.PositionUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float xpos_;
  float ypos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameDataUDP_2eproto();
  friend void protobuf_AssignDesc_GameDataUDP_2eproto();
  friend void protobuf_ShutdownFile_GameDataUDP_2eproto();

  void InitAsDefaultInstance();
  static PositionUpdate* default_instance_;
};
// -------------------------------------------------------------------

class DataMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameDataUDP.DataMessage) */ {
 public:
  DataMessage();
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();

  void Swap(DataMessage* other);

  // implements Message ----------------------------------------------

  inline DataMessage* New() const { return New(NULL); }

  DataMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameDataUDP.PositionUpdate positionUpdate = 1;
  bool has_positionupdate() const;
  void clear_positionupdate();
  static const int kPositionUpdateFieldNumber = 1;
  const ::GameDataUDP::PositionUpdate& positionupdate() const;
  ::GameDataUDP::PositionUpdate* mutable_positionupdate();
  ::GameDataUDP::PositionUpdate* release_positionupdate();
  void set_allocated_positionupdate(::GameDataUDP::PositionUpdate* positionupdate);

  // @@protoc_insertion_point(class_scope:GameDataUDP.DataMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::GameDataUDP::PositionUpdate* positionupdate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GameDataUDP_2eproto();
  friend void protobuf_AssignDesc_GameDataUDP_2eproto();
  friend void protobuf_ShutdownFile_GameDataUDP_2eproto();

  void InitAsDefaultInstance();
  static DataMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionUpdate

// optional float xPos = 1;
inline void PositionUpdate::clear_xpos() {
  xpos_ = 0;
}
inline float PositionUpdate::xpos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PositionUpdate.xPos)
  return xpos_;
}
inline void PositionUpdate::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PositionUpdate.xPos)
}

// optional float yPos = 2;
inline void PositionUpdate::clear_ypos() {
  ypos_ = 0;
}
inline float PositionUpdate::ypos() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.PositionUpdate.yPos)
  return ypos_;
}
inline void PositionUpdate::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:GameDataUDP.PositionUpdate.yPos)
}

// -------------------------------------------------------------------

// DataMessage

// optional .GameDataUDP.PositionUpdate positionUpdate = 1;
inline bool DataMessage::has_positionupdate() const {
  return !_is_default_instance_ && positionupdate_ != NULL;
}
inline void DataMessage::clear_positionupdate() {
  if (GetArenaNoVirtual() == NULL && positionupdate_ != NULL) delete positionupdate_;
  positionupdate_ = NULL;
}
inline const ::GameDataUDP::PositionUpdate& DataMessage::positionupdate() const {
  // @@protoc_insertion_point(field_get:GameDataUDP.DataMessage.positionUpdate)
  return positionupdate_ != NULL ? *positionupdate_ : *default_instance_->positionupdate_;
}
inline ::GameDataUDP::PositionUpdate* DataMessage::mutable_positionupdate() {
  
  if (positionupdate_ == NULL) {
    positionupdate_ = new ::GameDataUDP::PositionUpdate;
  }
  // @@protoc_insertion_point(field_mutable:GameDataUDP.DataMessage.positionUpdate)
  return positionupdate_;
}
inline ::GameDataUDP::PositionUpdate* DataMessage::release_positionupdate() {
  // @@protoc_insertion_point(field_release:GameDataUDP.DataMessage.positionUpdate)
  
  ::GameDataUDP::PositionUpdate* temp = positionupdate_;
  positionupdate_ = NULL;
  return temp;
}
inline void DataMessage::set_allocated_positionupdate(::GameDataUDP::PositionUpdate* positionupdate) {
  delete positionupdate_;
  positionupdate_ = positionupdate;
  if (positionupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameDataUDP.DataMessage.positionUpdate)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameDataUDP

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameDataUDP_2eproto__INCLUDED
